TABLAS: 

rolUsuarios
idRol                  int  PK
nombreRol              varchar(50)

usuarios
idUsuario              int  PK
nombresUsuario         varchar(50)
apellidosUsuario       varchar(50)
correoUsuario          varchar(50)
clave                  char(60)
numeroDocumentoCliente varchar(12)
telefonoUsuario        varchar(15)
estadoUsuario          enum(1,0)
idTipoDocumento        int  FK
idRol                  int  FK

tarjetas
idTarjeta              int  PK
tipoTarjeta            enum('debito','credito')
numeroTarjeta          char(60) 
nombreTitular          char(60) 
cvv                    char(60) 
fechaVencimiento       char(60) 
idUsuario              int  FK

caja
idCaja                 int  PK
saldoInicial           decimal(10,2)
montoActual            decimal(10,2)
saldoFinal             decimal(10,2)
estadoCaja             enum('abierto','cerrado')

eventosCaja
idEventoCaja           int  PK
tipoEvento             enum('apertura','cierre')
fechaEvento            datetime
idCaja                 int  FK
idUsuario              int  FK

movimientosCaja
idMovimientoCaja       int  PK
monto                  decimal(10,2)     
tipoMovimiento         enum('deposito','retiro')
fechaMovimiento        datetime
descripcionMovimiento  text
idCaja                 int  FK
idUsuario              int  FK

arqueosCaja
idArqueo               int  PK
fechaArqueo            datetime
dineroIngresado        decimal(10,2)
estadoArqueo           enum('cuadra','sobra','falta')
idCaja                 int  FK
idUsuario              int  FK

mesas
idMesa                 int  PK
numeroMesa             int
capacidad              int
estadoMesa             enum('disponible','reservada')

reservaciones
idReservacion          int  PK
fechaReservacion       date
horaReservacion        time
cantidadPersonas       int
estadoReservacion      enum('pendiente','pagado','cancelado')
fechaCreacion          datetime
idUsuario              int  FK
idMesa                 int  FK

pago
idPago                 int  PK
montoTotal             decimal(10,2)
montoPagado            decimal(10,2)
porcentajePago         int
idTransaccion          varchar(100)
fechaPago              datetime
estadoPago             enum('pendiente','confirmado','fallido')
idReservacion          int  FK

historialPagos
idHistorialPago        int  PK
montoPagado            decimal(10,2)
estadoAnterior         enum('pendiente','confirmado','fallido')
estadoNuevo            enum('pendiente','confirmado','fallido')
fechaCambio            datetime
accion                 enum('insert','update')
idPago                 int  FK

productos
idProducto             int  PK
nombreProducto         varchar(50)
descripcionProducto    text
imagen                 varchar(300)
unidad                 varchar(50)
precio                 decimal(10,2)
estado                 enum('eliminado','activo')

detalleReservaciones
idDetalleReservacion   int  PK
cantidadProductoR      int
precioUnitario         decimal(10,2)
idReservacion          int  FK
idProducto             int  FK

insumos
idInsumo               int  PK
nombreInsumo           varchar(50)
stockInsumo            decimal(10,2)
unidadMedida           varchar(20)
categoriaProducto      enum('insumo','bebida')
 
cantidadInsumoProducto
idProducto             int  PK, FK
idInsumo               int  PK, FK
cantidadUso            decimal(10,2)

movimientosStock
idMovimientoStock      int  PK
cantidadMovimiento     decimal(10,2)
tipoMovimiento         enum('salida','entrada')
fechaMovimiento        datetime
detallesMoviento       text
idInsumo               int  FK
idUsuario              int  FK

tipoComprobantes
idTipoComprobante      int  PK
nombreTipoComprobante  varchar(50)

medioPago
idMedioPago            int  PK  
nombreMedioPago        varchar(50)         

tipoDocumento   
idTipoDocumento        int  PK
nombreTipoDocumento    varchar(50)

ventas
idVenta                int  PK
numeroDocumentoCliente varchar(12)
serie                  varchar(5)
numeroCorrelativo      int
sunatTransaccion       tinyint
fechaEmision           date
fechaVencimiento       date null
porcentajeIGV          decimal(10,2)
totalGravada           decimal(10,2)
totalIGV               decimal(10,2)
totalVenta             decimal(10,2)
aceptadaPorSunat       tinyint
fechaRegistro          datetime
urlCombrobantePDF      varchar(100)
urlCombrobanteXML      varchar(100)
idMedioPago            int  FK 
idTipoComprobante      int  FK

detalleVentas
idDetalleVenta         int  PK
cantidadProducto       int
valorUnitario          decimal(10,2)
precioUnitario         decimal(10,2)
subtotal               decimal(10,2)
igv                    decimal(10,2)
totalProducto          decimal(10,2)
idVenta                int  FK
idProducto             int  FK

---------------------------------------------------------------------
SCRIPT DB:

CREATE DATABASE IF NOT EXISTS super_pollo;
USE super_pollo;

CREATE TABLE rolUsuarios(
idRol INT PRIMARY KEY AUTO_INCREMENT,
nombreRol VARCHAR(50) NOT NULL
);

CREATE TABLE tipoDocumento(  
idTipoDocumento INT PRIMARY KEY AUTO_INCREMENT,
nombreTipoDocumento VARCHAR(50) NOT NULL
);

CREATE TABLE usuarios(
idUsuario INT PRIMARY KEY AUTO_INCREMENT,
nombresUsuario VARCHAR(50) NOT NULL,
apellidosUsuario VARCHAR(50) NOT NULL,
correoUsuario VARCHAR(50) NOT NULL UNIQUE,
clave CHAR(60) NOT NULL,
numeroDocumentoUsuario VARCHAR(12) NOT NULL,
telefonoUsuario VARCHAR(15) NULL,
estadoUsuario ENUM('1','0') NOT NULL DEFAULT '1',
idRol INT,
idTipoDocumento INT,
FOREIGN KEY (idRol) REFERENCES rolUsuarios(idRol),
FOREIGN KEY (idTipoDocumento) REFERENCES tipoDocumento(idTipoDocumento) 
);

CREATE TABLE tarjetas(
idTarjeta INT PRIMARY KEY AUTO_INCREMENT,
tipoTarjeta ENUM('debito','credito') NOT NULL,
numeroTarjeta CHAR(60) NOT NULL,
nombreTitular CHAR(60) NOT NULL,
cvv CHAR(60) NOT NULL,
fechaVencimiento CHAR(60) NOT NULL,
idUsuario INT,
FOREIGN KEY (idUsuario) REFERENCES usuarios(idUsuario)
);

/* INSERTAR ROLES */
INSERT INTO rolUsuarios (nombreRol) 
VALUES ('Superadministrador'), ('Administrador'), ('Usuario');
/* INSERTAR TIPO DOCUMENTO */
INSERT INTO tipoDocumento (nombreTipoDocumento) 
VALUES ('DNI'), ('RUC');

------------------------------------------------------------------------------------
SCRIPT PROCEDIMIENTOS ALMACENADOS:

USE super_pollo;

DELIMITER //

/* PROCEDIMIENTO ALMACENADO insertarRol */
CREATE PROCEDURE insertarRol(
    IN p_nombreRol VARCHAR(50)
)
BEGIN
    INSERT INTO rolUsuarios(nombreRol) 
    VALUES (p_nombreRol);
END //

/* PROCEDIMIENTO ALMACENADO listarRoles */
CREATE PROCEDURE listarRoles()
BEGIN
    SELECT idRol, nombreRol 
    FROM rolUsuarios;
END //

/* PROCEDIMIENTO ALMACENADO actualizarRol */
CREATE PROCEDURE actualizarRol(
    IN p_idRol INT,
    IN p_nombreRol VARCHAR(50)
)
BEGIN
    UPDATE rolUsuarios
    SET nombreRol = p_nombreRol
    WHERE idRol = p_idRol;
END //

/* PROCEDIMIENTO ALMACENADO eliminarRol */
CREATE PROCEDURE eliminarRol(
    IN p_idRol INT
)
BEGIN
    DELETE FROM rolUsuarios 
    WHERE idRol = p_idRol;
END //

/* PROCEDIMIENTO ALMACENADO insertarUsuario */
CREATE PROCEDURE insertarUsuario (
    IN p_nombresUsuario VARCHAR(50),
    IN p_apellidosUsuario VARCHAR(50),
    IN p_correoUsuario VARCHAR(50),
    IN p_clave CHAR(60),
    IN p_numeroDocumentoUsuario VARCHAR(12),
    IN p_telefonoUsuario VARCHAR(15),
    IN p_idRol INT,
    IN p_idTipoDocumento INT
)
BEGIN 
    INSERT INTO usuarios(
           nombresUsuario, apellidosUsuario, correoUsuario, clave, 
           numeroDocumentoUsuario, telefonoUsuario, idRol, idTipoDocumento
    )
    VALUES (
           p_nombresUsuario, p_apellidosUsuario, p_correoUsuario, p_clave, 
           p_numeroDocumentoUsuario, p_telefonoUsuario, p_idRol, p_idTipoDocumento
    );
END //

/* PROCEDIMIENTO ALMACENADO listarUsuarios */
CREATE PROCEDURE listarUsuarios()
BEGIN 
    SELECT
          nombresUsuario,
          apellidosUsuario,
          correoUsuario,
          numeroDocumentoUsuario,
          telefonoUsuario,
          estadoUsuario,
          idRol,
          idTipoDocumento
    FROM usuarios;
END //

/* PROCEDIMIENTO ALMACENADO actualizarUsuario */
CREATE PROCEDURE actualizarUsuario(
    IN p_idUsuario INT,
    IN p_nombresUsuario VARCHAR(50),
    IN p_apellidosUsuario VARCHAR(50),
    IN p_correoUsuario VARCHAR(50),
    IN p_numeroDocumentoUsuario VARCHAR(12),
    IN p_telefonoUsuario VARCHAR(15),
    IN p_idRol INT,
    IN p_idTipoDocumento INT
)
BEGIN 
    UPDATE usuarios
    SET nombresUsuario = p_nombresUsuario, 
        apellidosUsuario = p_apellidosUsuario,
        correoUsuario = p_correoUsuario,
        numeroDocumentoUsuario = p_numeroDocumentoUsuario, 
        telefonoUsuario = p_telefonoUsuario, 
        idRol = p_idRol, 
        idTipoDocumento = p_idTipoDocumento
   WHERE idUsuario = p_idUsuario;
END //

/* PROCEDIMIENTO ALMACENADO actualizarClave */  
CREATE PROCEDURE actualizarClave(
    IN p_idUsuario INT,
    IN p_clave CHAR(60)
)
BEGIN
    UPDATE usuarios
    SET clave = p_clave
    WHERE idUsuario = p_idUsuario;
END //
    
/* PROCEDIMIENTO ALMACENADO eliminarUsuario */   
CREATE PROCEDURE eliminarUsuario(
    IN p_idUsuario INT
) 
BEGIN
    DELETE FROM usuarios
    WHERE idUsuario = p_idUsuario;
END //

/* PROCEDIMIENTO ALMACENADO iniciarSesion */ 
CREATE PROCEDURE iniciarSesion(
    IN p_correoUsuario VARCHAR(50),
    IN p_clave CHAR(60)
)
BEGIN
    SELECT 
        u.idUsuario,
        u.nombresUsuario,
        u.apellidosUsuario,
        u.correoUsuario,
        r.nombreRol
    FROM usuarios u
    INNER JOIN rolUsuarios r ON u.idRol = r.idRol
    WHERE u.correoUsuario = p_correoUsuario 
      AND u.clave = p_clave;
END //

DELIMITER ;

